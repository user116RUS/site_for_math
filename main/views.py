from django.shortcuts import render
from django.contrib.auth.decorators import login_required
from django.http import JsonResponse
import json
from openai import OpenAI
import re  # Добавляем для регулярных выражений
import logging  # Добавляем для логирования
import os
from dotenv import load_dotenv
from user.models import ChatSession, Message, Topic  # Импортируем модели для истории чатов

# Загружаем переменные окружения из .env файла
load_dotenv()

# Настройка логирования
logger = logging.getLogger(__name__)


def index(request):
    return render(request, 'main/index.html')


@login_required
def chat_view(request):
    # Создаем новую сессию чата или получаем активную, если указан id
    chat_id = request.GET.get('chat_id')
    
    if chat_id:
        try:
            chat_session = ChatSession.objects.get(id=chat_id, user=request.user)
        except ChatSession.DoesNotExist:
            # Если чат не существует или не принадлежит пользователю, создаем новый
            chat_session = ChatSession.objects.create(user=request.user, title="Новый чат")
    else:
        # Создаем новую сессию чата
        chat_session = ChatSession.objects.create(user=request.user, title="Новый чат")
    
    return render(request, 'main/chat.html', {'chat_session': chat_session})


@login_required
def simple_chat_view(request):
    """Упрощенная версия чата для тестирования"""
    return render(request, 'main/simple_chat.html')


# Функция для попытки исправления некорректного JSON в графиках
def fix_json_in_graphs(text):
    # Если нет тегов графиков, возвращаем текст как есть
    if "[[GRAPH:" not in text:
        return text
        
    # Пытаемся найти все графики и исправить их
    def replace_graph(match):
        graph_json = match.group(1)
        # Заменяем одинарные кавычки на двойные
        graph_json = graph_json.replace("'", '"')
        # Удаляем экранирующие слэши перед кавычками
        graph_json = graph_json.replace('\\"', '"')
        # Удаляем нестандартные обозначения вроде !!
        graph_json = graph_json.replace('!!', '"')
        # Удаляем символы переноса строки для валидного JSON
        graph_json = graph_json.replace('\n', ' ').replace('\r', ' ')
        
        try:
            # Проверяем, можно ли парсить JSON
            json.loads(graph_json)
            print(f"JSON успешно исправлен и валидирован")
        except json.JSONDecodeError as e:
            print(f"Не удалось исправить JSON: {e}")
            
        return "[[GRAPH:" + graph_json + "]]"
    
    # Применяем исправления к каждому найденному графику
    fixed_text = re.sub(r'\[\[GRAPH:(.*?)\]\]', replace_graph, text, flags=re.DOTALL)
    return fixed_text


def process_ai_message(request):
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            user_message = data.get('message', '')
            messages_history = data.get('history', [])
            is_smart_mode = data.get('smartMode', False)  # Получаем параметр умного режима
            chat_id = data.get('chatId')  # Получаем ID чата
            
            # Логируем запрос пользователя
            logger.info(f"Запрос пользователя: {user_message[:100]}...")
            
            # Если пользователь аутентифицирован, сохраняем его сообщение
            if request.user.is_authenticated and chat_id:
                try:
                    chat_session = ChatSession.objects.get(id=chat_id, user=request.user)
                    
                    # Если это первое сообщение, используем его начало как название чата
                    if Message.objects.filter(chat_session=chat_session).count() == 0:
                        # Обрезаем сообщение до 50 символов для названия
                        title = user_message[:50] + ('...' if len(user_message) > 50 else '')
                        chat_session.title = title
                        chat_session.save()
                    
                    # Сохраняем сообщение пользователя
                    Message.objects.create(
                        chat_session=chat_session,
                        role='user',
                        content=user_message
                    )
                except ChatSession.DoesNotExist:
                    # Если чат не существует, создаем новый
                    logger.warning(f"Чат с ID {chat_id} не найден. Создаем новый.")
                    chat_session = ChatSession.objects.create(
                        user=request.user, 
                        title=user_message[:50] + ('...' if len(user_message) > 50 else '')
                    )
                    # Сохраняем сообщение в новом чате
                    Message.objects.create(
                        chat_session=chat_session,
                        role='user',
                        content=user_message
                    )
                    chat_id = chat_session.id
            
            # Инициализация клиента OpenAI с использованием переменных окружения
            client = OpenAI(
                api_key=os.getenv('OPENAI_API_KEY'),
                base_url=os.getenv('OPENAI_BASE_URL'),
            )
            
            # Системное сообщение для настройки контекста
            system_message = """Ты - математический помощник для ученика. 
            Твоя цель - помогать с решением математических задач и объяснять математические концепции.
            Обязательно используй LaTeX для всех математических формул. 
            Формулы и уравнения оформляй в виде $$формула$$. 
            Небольшие математические выражения, символы и переменные внутри предложений оформляй как $выражение$.
            
            ВАЖНО: Не используй Markdown-форматирование в своих ответах. Не используй:
            - Символы # или ## для заголовков 
            - Символы ** для выделения жирным
            - Символы * для курсива
            - Символы > для цитат
            - Форматирование списков с помощью - или * в начале строки
            - Символы ` для кода
            
            Просто пиши обычный текст без специального форматирования. Для выделения важных моментов используй обычные слова вроде "Важно:", "Заметим:", "Обрати внимание:".
            
            Ты умеешь строить графики функций. Для этого используй СТРОГО следующий формат JSON, заключенный в двойные квадратные скобки:
            [[GRAPH:{"traces":[{"type":"scatter","mode":"lines","x":[значения_x],"y":[значения_y],"name":"Название функции"}],"layout":{"title":"Заголовок графика","xaxis":{"title":"Подпись оси X"},"yaxis":{"title":"Подпись оси Y"}}}]]
            
            ОЧЕНЬ ВАЖНО: 
            1. Используй для графиков ТОЛЬКО стандартные двойные кавычки (")
            2. НЕ используй одинарные кавычки (') или экранированные кавычки (\\")
            3. НЕ используй символы типа !! или другие нестандартные обозначения
            4. Весь формат должен быть валидным JSON внутри [[GRAPH: и ]]
            5. Не переноси на новую строку части JSON - весь JSON должен быть в одной строке
            
            Примеры построения графиков:
            
            1. График линейной функции y = 2x + 1:
            [[GRAPH:{"traces":[{"type":"scatter","mode":"lines","x":[-5,-4,-3,-2,-1,0,1,2,3,4,5],"y":[-9,-7,-5,-3,-1,1,3,5,7,9,11],"name":"y = 2x + 1"}],"layout":{"title":"График функции y = 2x + 1","xaxis":{"title":"x"},"yaxis":{"title":"y"}}}]]
            
            2. График параболы y = x²:
            [[GRAPH:{"traces":[{"type":"scatter","mode":"lines","x":[-5,-4,-3,-2,-1,0,1,2,3,4,5],"y":[25,16,9,4,1,0,1,4,9,16,25],"name":"y = x²"}],"layout":{"title":"График функции y = x²","xaxis":{"title":"x"},"yaxis":{"title":"y"}}}]]
            
            3. Сравнение нескольких функций (на одном графике):
            [[GRAPH:{"traces":[
                {"type":"scatter","mode":"lines","x":[-5,-4,-3,-2,-1,0,1,2,3,4,5],"y":[-5,-4,-3,-2,-1,0,1,2,3,4,5],"name":"y = x"},
                {"type":"scatter","mode":"lines","x":[-5,-4,-3,-2,-1,0,1,2,3,4,5],"y":[25,16,9,4,1,0,1,4,9,16,25],"name":"y = x²"},
                {"type":"scatter","mode":"lines","x":[-5,-4,-3,-2,-1,0,1,2,3,4,5],"y":[-125,-64,-27,-8,-1,0,1,8,27,64,125],"name":"y = x³"}
            ],"layout":{"title":"Сравнение функций","xaxis":{"title":"x"},"yaxis":{"title":"y"}}}]]
            
            4. Тригонометрические функции:
            [[GRAPH:{"traces":[
                {"type":"scatter","mode":"lines","x":[0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2,2.1,2.2,2.3,2.4,2.5,2.6,2.7,2.8,2.9,3,3.1,3.2,3.3,3.4,3.5,3.6,3.7,3.8,3.9,4,4.1,4.2,4.3,4.4,4.5,4.6,4.7,4.8,4.9,5,5.1,5.2,5.3,5.4,5.5,5.6,5.7,5.8,5.9,6,6.1,6.2,6.3],"y":[0,0.0998,0.1987,0.2955,0.3894,0.4794,0.5646,0.6442,0.7174,0.7833,0.8415,0.8912,0.9320,0.9636,0.9854,0.9975,0.9996,0.9917,0.9738,0.9463,0.9093,0.8632,0.8085,0.7457,0.6755,0.5985,0.5155,0.4274,0.3350,0.2392,0.1411,0.0416,-0.0584,-0.1577,-0.2555,-0.3508,-0.4425,-0.5298,-0.6119,-0.6878,-0.7568,-0.8183,-0.8716,-0.9162,-0.9516,-0.9775,-0.9937,-0.9999,-0.9962,-0.9827,-0.9595,-0.9269,-0.8855,-0.8355,-0.7778,-0.7128,-0.6413,-0.5644,-0.4828,-0.3974,-0.3090,-0.2181,-0.1256,-0.0323],"name":"sin(x)"},
                {"type":"scatter","mode":"lines","x":[0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2,2.1,2.2,2.3,2.4,2.5,2.6,2.7,2.8,2.9,3,3.1,3.2,3.3,3.4,3.5,3.6,3.7,3.8,3.9,4,4.1,4.2,4.3,4.4,4.5,4.6,4.7,4.8,4.9,5,5.1,5.2,5.3,5.4,5.5,5.6,5.7,5.8,5.9,6,6.1,6.2,6.3],"y":[1,0.995,0.9801,0.9553,0.9211,0.8776,0.8253,0.7648,0.6967,0.6216,0.5403,0.4536,0.3624,0.2675,0.1700,0.0707,-0.0292,-0.1288,-0.2272,-0.3233,-0.4161,-0.5048,-0.5885,-0.6663,-0.7374,-0.8011,-0.8569,-0.9041,-0.9422,-0.9710,-0.9900,-0.9991,-0.9982,-0.9875,-0.9668,-0.9364,-0.8968,-0.8481,-0.7910,-0.7259,-0.6536,-0.5748,-0.4903,-0.4008,-0.3073,-0.2108,-0.1123,-0.0126,0.0872,0.1859,0.2827,0.3765,0.4663,0.5514,0.6311,0.7046,0.7710,0.8294,0.8792,0.9200,0.9511,0.9727,0.9844,0.9860],"name":"cos(x)"}
            ],"layout":{"title":"Тригонометрические функции","xaxis":{"title":"x"},"yaxis":{"title":"y"}}}]]
            
            5. Показательная и логарифмическая функции:
            [[GRAPH:{"traces":[
                {"type":"scatter","mode":"lines","x":[-3,-2.8,-2.6,-2.4,-2.2,-2,-1.8,-1.6,-1.4,-1.2,-1,-0.8,-0.6,-0.4,-0.2,0,0.2,0.4,0.6,0.8,1,1.2,1.4,1.6,1.8,2,2.2,2.4,2.6,2.8,3],"y":[0.0498,0.0608,0.0743,0.0907,0.1108,0.1353,0.1653,0.2019,0.2466,0.3012,0.3679,0.4493,0.5488,0.6703,0.8187,1,1.2214,1.4918,1.8221,2.2255,2.7183,3.3201,4.0552,4.9530,6.0496,7.3891,9.0250,11.0232,13.4637,16.4446,20.0855],"name":"e^x"},
                {"type":"scatter","mode":"lines","x":[0.01,0.5,1,1.5,2,2.5,3,3.5,4,4.5,5,5.5,6,6.5,7,7.5,8,8.5,9,9.5,10],"y":[-4.6052,-0.6931,0,0.4055,0.6931,0.9163,1.0986,1.2528,1.3863,1.5041,1.6094,1.7047,1.7918,1.8718,1.9459,2.0149,2.0794,2.1401,2.1972,2.2513,2.3026],"name":"ln(x)"}
            ],"layout":{"title":"Показательная и логарифмическая функции","xaxis":{"title":"x"},"yaxis":{"title":"y"}}}]]
            
            6. Столбчатая диаграмма (для статистических данных):
            [[GRAPH:{"traces":[
                {"type":"bar","x":["Понедельник","Вторник","Среда","Четверг","Пятница"],"y":[12,19,7,15,10],"name":"Данные"}
            ],"layout":{"title":"Пример статистической диаграммы","xaxis":{"title":"День недели"},"yaxis":{"title":"Количество"}}}]]
            
            7. Круговая диаграмма (для долей или процентов):
            [[GRAPH:{"traces":[
                {"type":"pie","labels":["A","B","C","D","E"],"values":[20,30,15,25,10],"name":"Распределение"}
            ],"layout":{"title":"Круговая диаграмма"}}]]
            
            8. Трёхмерный график поверхности (для функций двух переменных):
            [[GRAPH:{"traces":[
                {"type":"surface","z":[[0,1,0],[-1,2,-1],[0,1,0]],"name":"z = f(x,y)"}
            ],"layout":{"title":"3D поверхность","scene":{"xaxis":{"title":"X"},"yaxis":{"title":"Y"},"zaxis":{"title":"Z"}}}}]]
            
            9. Контурный график (для функций двух переменных):
            [[GRAPH:{"traces":[
                {"type":"contour","z":[[10,10.625,12.5,15.625,20],[5.625,6.25,8.125,11.25,15.625],[2.5,3.125,5,8.125,12.5],[0.625,1.25,3.125,6.25,10.625],[0,0.625,2.5,5.625,10]],"x":[-2,-1,0,1,2],"y":[-2,-1,0,1,2],"name":"z = x² + y²"}
            ],"layout":{"title":"Контурная карта функции z = x² + y²","xaxis":{"title":"X"},"yaxis":{"title":"Y"}}}]]
            
            10. Параметрические кривые:
            [[GRAPH:{"traces":[
                {"type":"scatter","mode":"lines","x":[0,0.098,0.195,0.290,0.383,0.471,0.556,0.634,0.707,0.773,0.831,0.882,0.924,0.957,0.981,0.995,1,0.995,0.981,0.957,0.924,0.882,0.831,0.773,0.707,0.634,0.556,0.471,0.383,0.290,0.195,0.098,0,-0.098,-0.195,-0.290,-0.383,-0.471,-0.556,-0.634,-0.707,-0.773,-0.831,-0.882,-0.924,-0.957,-0.981,-0.995,-1,-0.995,-0.981,-0.957,-0.924,-0.882,-0.831,-0.773,-0.707,-0.634,-0.556,-0.471,-0.383,-0.290,-0.195,-0.098,0],"y":[1,0.995,0.981,0.957,0.924,0.882,0.831,0.773,0.707,0.634,0.556,0.471,0.383,0.290,0.195,0.098,0,-0.098,-0.195,-0.290,-0.383,-0.471,-0.556,-0.634,-0.707,-0.773,-0.831,-0.882,-0.924,-0.957,-0.981,-0.995,-1,-0.995,-0.981,-0.957,-0.924,-0.882,-0.831,-0.773,-0.707,-0.634,-0.556,-0.471,-0.383,-0.290,-0.195,-0.098,0,0.098,0.195,0.290,0.383,0.471,0.556,0.634,0.707,0.773,0.831,0.882,0.924,0.957,0.981,0.995,1],"name":"Окружность (x = cos(t), y = sin(t))"}
            ],"layout":{"title":"Параметрическая кривая","xaxis":{"title":"X","scaleanchor":"y","scaleratio":1},"yaxis":{"title":"Y"}}}]]
            
            11. Полярные координаты:
            [[GRAPH:{"traces":[
                {"type":"scatterpolar","r":[0,0.5,1,1.5,2,2.5,3,3.5,4,4.5,5,5.5,6],"theta":[0,30,60,90,120,150,180,210,240,270,300,330,360],"name":"r = θ/60"}
            ],"layout":{"title":"График в полярных координатах","polar":{"radialaxis":{"title":"r"},"angularaxis":{"title":"θ"}}}}]]
            
            12. Векторное поле:
            [[GRAPH:{"traces":[
                {"type":"cone","x":[-4,-3,-2,-1,0,1,2,3,4,-4,-3,-2,-1,0,1,2,3,4,-4,-3,-2,-1,0,1,2,3,4,-4,-3,-2,-1,0,1,2,3,4,-4,-3,-2,-1,0,1,2,3,4],"y":[-2,-2,-2,-2,-2,-2,-2,-2,-2,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2],"z":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"u":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"v":[-4,-3,-2,-1,0,1,2,3,4,-4,-3,-2,-1,0,1,2,3,4,-4,-3,-2,-1,0,1,2,3,4,-4,-3,-2,-1,0,1,2,3,4,-4,-3,-2,-1,0,1,2,3,4],"w":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"name":"Векторное поле"}
            ],"layout":{"title":"Векторное поле","scene":{"xaxis":{"title":"X"},"yaxis":{"title":"Y"},"zaxis":{"title":"Z"},"aspectratio":{"x":1,"y":1,"z":0.5}}}}]]
            
            13. Криволинейная трапеция:
            [[GRAPH:{"traces":[
                {"type":"scatter","mode":"lines","x":[0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0],"y":[0,0.1,0.36,0.49,0.64,0.75,0.84,0.91,0.96,0.99,1.0],"name":"y = x²"},
                {"type":"scatter","mode":"lines","x":[0,0,1,1,0],"y":[0,1,1,0,0],"fill":"toself","fillcolor":"rgba(0,176,246,0.2)","line":{"color":"transparent"},"name":"Криволинейная трапеция"},
                {"type":"scatter","mode":"lines","x":[0,1],"y":[0,0],"name":"Ось x"}
            ],"layout":{"title":"Криволинейная трапеция","xaxis":{"title":"x"},"yaxis":{"title":"y"}}}]]
            
            14. Гладкий график кубической функции с большим количеством точек:
            [[GRAPH:{"traces":[
                {"type":"scatter","mode":"lines","x":[-5,-4.9,-4.8,-4.7,-4.6,-4.5,-4.4,-4.3,-4.2,-4.1,-4,-3.9,-3.8,-3.7,-3.6,-3.5,-3.4,-3.3,-3.2,-3.1,-3,-2.9,-2.8,-2.7,-2.6,-2.5,-2.4,-2.3,-2.2,-2.1,-2,-1.9,-1.8,-1.7,-1.6,-1.5,-1.4,-1.3,-1.2,-1.1,-1,-0.9,-0.8,-0.7,-0.6,-0.5,-0.4,-0.3,-0.2,-0.1,0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2,2.1,2.2,2.3,2.4,2.5,2.6,2.7,2.8,2.9,3,3.1,3.2,3.3,3.4,3.5,3.6,3.7,3.8,3.9,4,4.1,4.2,4.3,4.4,4.5,4.6,4.7,4.8,4.9,5],"y":[-125,-117.649,-110.592,-103.823,-97.336,-91.125,-85.184,-79.507,-74.088,-68.921,-64,-59.319,-54.872,-50.653,-46.656,-42.875,-39.304,-35.937,-32.768,-29.791,-27,-24.389,-21.952,-19.683,-17.576,-15.625,-13.824,-12.167,-10.648,-9.261,-8,-6.859,-5.832,-4.913,-4.096,-3.375,-2.744,-2.197,-1.728,-1.331,-1,-0.729,-0.512,-0.343,-0.216,-0.125,-0.064,-0.027,-0.008,-0.001,0,0.001,0.008,0.027,0.064,0.125,0.216,0.343,0.512,0.729,1,1.331,1.728,2.197,2.744,3.375,4.096,4.913,5.832,6.859,8,9.261,10.648,12.167,13.824,15.625,17.576,19.683,21.952,24.389,27,29.791,32.768,35.937,39.304,42.875,46.656,50.653,54.872,59.319,64,68.921,74.088,79.507,85.184,91.125,97.336,103.823,110.592,117.649,125],"name":"y = x³"}
            ],"layout":{"title":"График функции y = x³ (100 точек)","xaxis":{"title":"x"},"yaxis":{"title":"y"}}}]]
            
            Используй графики, когда это нужно для наглядного объяснения решения задач, особенно в случаях:
            - Объяснение поведения функций
            - Визуализация решений уравнений и неравенств
            - Иллюстрация понятий максимума, минимума, промежутков возрастания и убывания
            - Демонстрация геометрического смысла производной и интеграла
            
            Рекомендации по использованию графиков в различных разделах математики:
            
            1. Линейная алгебра:
               - Отображай векторы на координатной плоскости
               - Визуализируй линейные преобразования
               - Показывай решения систем линейных уравнений графически
            
            2. Функции и их свойства:
               - Всегда строй график при анализе свойств функции
               - При нахождении асимптот показывай их на графике
               - Для наглядности отображай точки экстремума, перегиба, нули функции
            
            3. Производные и интегралы:
               - Иллюстрируй геометрический смысл производной как угловой коэффициент касательной
               - Показывай площадь под графиком при объяснении интегралов
               - Строй графики первообразных
            
            4. Дифференциальные уравнения:
               - Отображай семейство решений дифференциального уравнения
               - Показывай поля направлений
            
            5. Теория вероятностей и статистика:
               - Используй столбчатые диаграммы для дискретных распределений
               - Применяй графики плотности вероятности для непрерывных распределений
               - Строй графики нормального распределения при необходимости
            
            При создании графиков:
            - Подбирай масштаб осей так, чтобы важные особенности функции были хорошо видны
            - Всегда подписывай оси и давай заголовок графику
            - Если на одном графике несколько функций, используй разные цвета и добавляй легенду
            - Для сложных функций используй больше точек для построения, чтобы график был гладким
            
            ВАЖНО ДЛЯ ПОСТРОЕНИЯ ГРАФИКОВ:
            - Используй КАК МИНИМУМ 100 точек для построения графиков непрерывных функций, иначе кривая будет выглядеть угловатой
            - Для нелинейных функций (квадратичных, кубических, тригонометрических и т.д.) используй 100-200 точек
            - Для быстро изменяющихся функций (например, sin(1/x)) используй до 500 точек
            - Для трёхмерных графиков используй сетку не менее 30x30 точек
            - Для функций с вертикальными асимптотами разбивай график на части, чтобы избежать некорректного отображения
            
            Сначала анализируй вопрос ученика, определяй его уровень знаний и адаптируй объяснение под этот уровень.
            Давай подробные, понятные объяснения и, если уместно, разбивай решение на шаги.
            
            В заключение подведи итог и убедись, что ученик понял материал."""
            
            # Создание сообщений для запроса к API
            api_messages = []
            api_messages.append({"role": "system", "content": system_message})
            
            # Добавляем историю сообщений, но пропускаем текущее сообщение пользователя, 
            # так как оно будет добавлено ниже
            if messages_history:
                # Ограничиваем количество сообщений, чтобы не превысить лимиты API
                # Берем несколько последних сообщений (например, 10)
                history_limit = 10
                recent_messages = messages_history[-history_limit:-1] if len(messages_history) > history_limit else messages_history[:-1]
                
                for msg in recent_messages:
                    # Проверяем, что сообщение имеет правильный формат
                    if isinstance(msg, dict) and 'role' in msg and 'content' in msg:
                        # Преобразуем "user" и "assistant" в значения, ожидаемые API
                        role = msg['role']
                        if role == 'assistant':
                            role = 'assistant'  # Это уже правильный формат
                        elif role == 'user':
                            role = 'user'  # Это уже правильный формат
                        else:
                            # Пропускаем сообщения с неизвестной ролью
                            continue
                        
                        api_messages.append({"role": role, "content": msg['content']})
            
            # Добавляем текущее сообщение пользователя
            api_messages.append({"role": "user", "content": user_message})
            
            # Отправка запроса к API
            if is_smart_mode:
                # Умный режим с расширенными параметрами
                response_big = client.chat.completions.create(
                    model="openai/o4-mini-high",  # Используем новую модель
                    messages=api_messages,
                    temperature=0.5,  # Чуть меньше случайности для точности
                    top_p=0.9,
                    max_tokens=4000,   # Увеличиваем лимит для подробных объяснений
                    presence_penalty=0.6,
                    frequency_penalty=0.5,
                    extra_headers={
                        "X-Title": "Math Learning App",
                        "X-Reasoning-Enabled": "true"  # Активируем расширенные рассуждения
                    }
                )
            else:
                # Стандартный режим
                response_big = client.chat.completions.create(
                    model="anthropic/claude-3-5-haiku",  # можно использовать разные модели
                    messages=api_messages,
                    temperature=0.5,
                    n=1,
                    max_tokens=3000,
                    extra_headers={"X-Title": "Math Learning App"},
                )
            
            # Получение ответа
            ai_response = response_big.choices[0].message.content
            
            # Выводим ответ ИИ в консоль для отладки
            print("\n\n========== ОТЛАДКА: ОТВЕТ ИИ ==========")
            print(ai_response)
            print("========== КОНЕЦ ОТВЕТА ИИ ==========\n\n")
            
            # Также проверяем наличие тегов GRAPH и их формат
            if "[[GRAPH:" in ai_response:
                print("Найден тег графика в ответе")
                graph_parts = re.findall(r'\[\[GRAPH:(.*?)\]\]', ai_response, re.DOTALL)
                for i, part in enumerate(graph_parts):
                    print(f"График {i+1}:")
                    print(part.strip())
                    # Проверяем валидность JSON
                    try:
                        json_part = part.strip()
                        json.loads(json_part)
                        print(f"График {i+1} имеет валидный JSON")
                    except json.JSONDecodeError as e:
                        print(f"График {i+1} имеет НЕВАЛИДНЫЙ JSON: {str(e)}")
                        
                        # Находим и показываем проблемные символы
                        print("Первые 20 символов графика:")
                        for idx, char in enumerate(json_part[:20]):
                            print(f"{idx}: '{char}' (код {ord(char)})")
            
            # Пытаемся исправить JSON в графиках, если он некорректный
            fixed_response = fix_json_in_graphs(ai_response)
            
            # Если ответ был исправлен, проверяем его еще раз
            if fixed_response != ai_response:
                print("\n\n========== ОТЛАДКА: ИСПРАВЛЕННЫЙ ОТВЕТ ==========")
                print(fixed_response)
                print("========== КОНЕЦ ИСПРАВЛЕННОГО ОТВЕТА ==========\n\n")
                ai_response = fixed_response
            
            # Если пользователь аутентифицирован, сохраняем ответ ассистента
            if request.user.is_authenticated and chat_id:
                try:
                    chat_session = ChatSession.objects.get(id=chat_id, user=request.user)
                    # Сохраняем ответ ассистента
                    Message.objects.create(
                        chat_session=chat_session,
                        role='assistant',
                        content=ai_response
                    )
                except ChatSession.DoesNotExist:
                    logger.error(f"Не удалось сохранить ответ ассистента: чат {chat_id} не найден.")
            
            # Не применяем никакой другой постобработки к ответу
            return JsonResponse({'response': ai_response, 'chatId': chat_id})
            
        except Exception as e:
            return JsonResponse({'error': str(e)}, status=500)
    
    return JsonResponse({'error': 'Only POST requests are allowed'}, status=405)

